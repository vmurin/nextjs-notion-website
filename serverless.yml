service: assets-murin-online
frameworkVersion: "3"

# template for static website in some existing hosting zone (main domain)
# only SSL certificate should be created before deployment
custom:
  siteName: assets.murin-online.de #subdomain of the main domain
  aliasHostedZoneId: Z3U58KT9Q6MC52 # zone id of the main domain
  aliasDNSName: s3.eu-central-1.amazonaws.com # s3-website.eu-central-1.amazonaws.com
  SSLCertificateID: c95f5ed4-fe44-4441-b2c2-c7eb4b7183dc
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: aws_images

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1

plugins:
  - serverless-s3-sync

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.siteName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter

    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
        - WebsiteBucket
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal:
                Service: "cloudfront.amazonaws.com"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "WebsiteBucket"
                    },
                    "/*"
                  ]
                ]
              Condition:
                StringEquals:
                  AWS:SourceArn:
                    Fn::Join: [
                      "", [
                        "arn:aws:cloudfront::",
                        {
                          'Ref': 'AWS::AccountId'
                        },
                        ":distribution/",
                        {
                          'Ref': 'myCloudDistribution'
                        }
                      ]
                    ]

    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        # existing hosted zone for subdomain
        HostedZoneId: ${self:custom.aliasHostedZoneId}
        AliasTarget:
          DNSName: { Fn::GetAtt: [ myCloudDistribution, DomainName ] }
          # Default (static) hosted zone for CloudFront
          HostedZoneId: "Z2FDTNDATAQYW2"  # Fixed Hosted Zone ID for CloudFront
        Name: ${self:custom.siteName}
        Type: 'A'

    myCloudDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - WebsiteBucket
      Properties:
        DistributionConfig:
          Enabled: 'true'
          DefaultRootObject: "index.html"
          # The default caching applies to the default (root) objects, not to images etc...
          DefaultCacheBehavior:
            Compress: 'true'
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            # MinTTL: "0"
            # MaxTTL: "0"
            # DefaultTTL: "0"
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
          Origins:
            - DomainName: ${self:custom.siteName}.${self:custom.aliasDNSName}
              ## An identifier for the origin which must be unique within the distribution
              Id: myS3Origin
              OriginAccessControlId: { Fn::GetAtt: [ S3OriginAccessControl, Id ] }
              S3OriginConfig: {}
          PriceClass: PriceClass_All
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          Aliases:
            - ${self:custom.siteName}
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:${aws:accountId}:certificate/${self:custom.SSLCertificateID}
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only

    S3OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: "${self:service}-origin-access-control"
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
